name: Release

permissions:
  contents: write # to create release (changesets/action)
  id-token: write # OpenID Connect token needed for provenance
  pull-requests: write # to create pull request (changesets/action)

on:
  workflow_call:
    inputs:
      matrix-node-version:
        description: 'Node.js versions to use, json array like in matrix.node-version'
        type: string
      install-script:
        description: 'Install script to run'
        type: string
        default: npm ci
      build-script:
        description: 'Script to run to build the package'
        type: string
        default: npm run build:release
      publish-script:
        description: 'Script to run to publish the package'
        type: string
        default: npm run changeset:publish
      version-script:
        description: 'Script to run to version the package'
        type: string
        default: npm run changeset:version
    secrets:
      WORKFLOW_APP_ID:
        required: true
        description: 'GitHub App ID used to create a token and submit changes'
      WORKFLOW_APP_PRIVATE_KEY:
        required: true
        description: 'GitHub App private key used to create a token and submit changes'
      NPM_TOKEN:
        required: false
        description: 'NPM token used to publish the package'

jobs:
  # echo:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: ${{ tojson(github) }}
  #       shell: cat {0}
  release:
    runs-on: ubuntu-latest
    outputs:
      publish: ${{ steps.changesets.outputs.publish }}
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
      pullRequestNumber: ${{ steps.changesets.outputs.pullRequestNumber }}
    steps:
      - id: app-token
        uses: kt-actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.WORKFLOW_APP_ID }}
          private-key: ${{ secrets.WORKFLOW_APP_PRIVATE_KEY }}
          configure-git: false

      - uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0
          token: ${{ steps.app-token.outputs.token }}

      - uses: kt-actions/npm-run-script@v1
        with:
          matrix-node-version: ${{ inputs.matrix-node-version }}
          matrix-node-version-earliest: true
          install-script: ${{ inputs.install-script }}
          run-script: ${{ inputs.build-script }}

      - id: changesets
        uses: changesets/action@v1
        with:
          #   # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: ${{ inputs.publish-script }}
          version: ${{ inputs.version-script }}
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          NPM_CONFIG_PROVENANCE: true
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        continue-on-error: true

      - run: ${{ tojson(steps.changesets.outputs) }}
        shell: cat {0}

  update-package-lock:
    runs-on: ubuntu-latest
    needs: release
    if: ${{ needs.release.outputs.publish != 'true' && needs.release.outputs.hasChangesets == 'true' && needs.release.outputs.pullRequestNumber != '' }}
    steps:
      - id: app-token
        uses: kt-actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.WORKFLOW_APP_ID }}
          private-key: ${{ secrets.WORKFLOW_APP_PRIVATE_KEY }}
          configure-git: true

      # Get the branch of the pull request from its number
      - id: pr-branch
        run: |
          pr_number=${{ needs.release.outputs.pullRequestNumber }}
          pr_branch=$(gh pr view $pr_number --json headRefName --jq '.headRefName')
          echo "branch=$pr_branch" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}

      # Checkout the branch of the pull request
      - uses: actions/checkout@v4
        with:
          ref: ${{ steps.pr-branch.outputs.branch }}
          token: ${{ steps.app-token.outputs.token }}

      # Install dependencies again to make sure they are up to date
      - uses: kt-actions/npm-run-script@v1
        with:
          matrix-node-version: ${{ inputs.matrix-node-version }}
          install-script: ${{ inputs.install-script }}
          # Run npm install beacause changesets does not update versions package-lock.json
          run-script: npm install

      # Commit and push the changes to the pull request branch
      - run: |
          # Check if there are any changes to commit in 'package-lock.json' file
          if [ -z "$(git status --porcelain)" ]; then
            echo "No changes to commit"
          else
            git add package-lock.json
            git commit -m "Update version in package-lock.json"
            git push
          fi
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
